"""删除元素
若想删除索引 i 处的元素，
则需要把索引 i 之后的元素都向前移动一位
删除元素完成后，原先末尾的元素变得“无意义”了，
所以我们无须特意去修改它
数组长度固定
"""

"""数组的插入与删除操作有以下缺点
- 时间复杂度高：数组的插入和删除的平均时间复杂度均为 O(n)，
    其中 n  为数组长度。
- 丢失元素：由于数组的长度不可变，因此在插入元素后，
    超出数组长度范围的元素会丢失。
- 内存浪费：我们可以初始化一个比较长的数组，只用前面一部分，
    这样在插入数据时，丢失的末尾元素都是“无意义”的，
    但这样做会造成部分内存空间浪费。
"""

def remove_elem(nums: list[int], index:int) -> list[int]:
    """删除指定下标的元素"""
    nums = nums[:]
    for i in range(index, len(nums)-1):
        nums[i] = nums[i + 1]
    return nums

if __name__ == '__main__':
    nums = [1, 3, 2, 5, 4]
    print(nums) # [1, 3, 2, 5, 4]
    # 数组删除元素 数组长度不变
    print(remove_elem(nums, 3)) # [1, 3, 2, 4, 4]
    # python列表删除元素 列表长度缩短
    del nums[3]
    print(nums) # [1, 3, 2, 4]